#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
char stack[256];
int count = -1, postcount = 0, counteval = -1;
char post[100];
float eval[100];
void pushev(float c)
{
	counteval++;
	eval[counteval] = c;
}
float popev()
{
	if (counteval == -1)
		return 0;
	else
		return eval[counteval--];
}
float evaluate()
{
	float x, y;
	int i = 0;
	float sum = 0;
	while (post[i] != '\0')
	{
		if (post[i] == '+')
		{
			x = popev();
			y = popev();
			sum = y + x;
			pushev(sum);
		}
		else if (post[i] == '-')
		{
			x = popev();
			y = popev();
			sum = y - x;
			pushev(sum);
		}
		else if (post[i] == '/')
		{
			x = popev();
			y = popev();
			sum = y / x;
			pushev(sum);
		}
		else if (post[i] == '*')
		{
			x = popev();
			y = popev();
			sum = y * x;
			pushev(sum);
		}
		else if (post[i] == '^')
		{
			x = popev();
			y = popev();
			sum = pow(y, x);
			pushev(sum);
		}
		else
			pushev(post[i] - '0');
		i++;
	}
	return(popev());
}
void push(char c)
{
	count++;
	stack[count] = c;
}
char pop()
{
	if (count == -1)
		return 0;
	else
		return stack[count--];
}
void popall()
{
	while (count > -1)
	{
		char x = pop();
		if (x != '(')
		{
			post[postcount++] = x;
		}
		else if (x == '(')
		{
			int z = 0;
		}
	}
}
int isempty()
{
	if (count == -1)
		return 1;
	else
		return 0;
}
char top()
{
	if (count > -1)
	{
		return stack[count];
	}
	else
		return 0;
}
int prefered(char a)
{
	if (a == '+' || a == '-')
		return 1;
	else if (a == '*' || a == '/')
		return 2;
	else if (a == '^')
		return 3;
	else if (a == '(')
		return -1;
	else
		return 0;
}
int chck_brakects(char ae[])
{
	int i = 0, k;
	while (i < 100)
	{
		k = isempty();
		if (ae[i] == '(' || ae[i] == '[' || ae[i] == '{')
			push(ae[i]);
		else if (k == 0 && top() == '(' && ae[i] == ')')
			pop();
		else if (k == 0 && top() == '[' && ae[i] == ']')
			pop();
		else if (k == 0 && top() == '{' && ae[i] == '}')
			pop();
		else if (k == 1 && ae[i] == ')' || ae[i] == ']' || ae[i] == '}')
			return 0;
		i++;
	}
	if (isempty())
		return 1;
}
int chck_operators(char inf[])
{
	int i = 0;
	while (i < strlen(inf))
	{
		if (inf[i] == '+' || inf[i] == '^' || inf[i] == '/' || inf[i] == '-' || inf[i] == '*')
			if (inf[i + 1] == '+' || inf[i + 1] == '^' || inf[i + 1] == '/' || inf[i + 1] == '*' || inf[i + 1] == '-')
				return 0;
		i++;
	}
	if (i == strlen(inf))
		return 1;
}
void main()
{
	char inf[100];
	char* p;
	int i = 0;
	printf("You may enter the Equation \n");
	gets(inf);


	if (chck_brakects(inf) == 1 && chck_operators(inf) == 1)
	{
		p = inf;
		while (*p != '\0')
		{
			if (isalnum(*p))
				post[postcount++] = *p;
			else if (*p == '(')
				push(*p);
			else if (*p == ')')
			{
				popall();
			}
			else
			{
				if (prefered(stack[count]) >= prefered(*p))
				{
					while (prefered(stack[count]) >= prefered(*p))
					{
						post[postcount++] = pop();
					}
					push(*p);
				}
				else if (prefered(stack[count]) <= prefered(*p))
					push(*p);
			}
			p++;
		}
		while (count != -1)
		{
			post[postcount++] = pop();
		}
		float x = evaluate();
		printf("%.4f", x);
	}
	else
	{
		printf("Please enter The equation right\n");
		main();
	}
}
